dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep <- count.muestra[count.muestra=0]
cts <- cts1[keep,]
cts <- na.omit(cts)
dim(cts)
keep <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep <- count.muestra[count.muestra=1]
cts <- cts1[keep,]
cts <- na.omit(cts)
dim(cts)
keep <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep <- count.muestra[count.muestra=2]
cts <- cts1[keep,]
cts <- na.omit(cts)
dim(cts)
keep <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep <- count.muestra[count.muestra<=5]
cts <- cts1[keep,]
cts <- na.omit(cts)
dim(cts)
keep <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep <- count.muestra[count.muestra<=4]
cts <- cts1[keep,]
cts <- na.omit(cts)
dim(cts)
keep <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep <- count.muestra[count.muestra<=3]
cts <- cts1[keep,]
cts <- na.omit(cts)
dim(cts)
keep <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep <- count.muestra[count.muestra<=2]
cts <- cts1[keep,]
cts <- na.omit(cts)
dim(cts)
View(cts)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# paquetes "nativos" de R
if(!require(magrittr)) install.packages("magrittr", dep=TRUE)
if(!require(dplyr)) install.packages("dplyr", dep=TRUE)
if(!require(ggplot2)) install.packages("ggplot2", dep=TRUE)
if(!require(pheatmap)) install.packages("pheatmap", dep=TRUE)
if(!require(RColorBrewer)) install.packages("RColorBrewer", dep=TRUE)
if(!require(ggbeeswarm)) install.packages("ggbeeswarm", dep=TRUE)
if(!require(edgeR)) install.packages("edgeR", dep=TRUE)
# paquetes de Bioconductor
if(!require(BiocManager)) install.packages("BiocManager")
if(!require(Rsamtools)) BiocManager::install("Rsamtools")
if(!require(GenomicFeatures)) BiocManager::install("GenomicFeatures")
if(!require(DESeq2)) BiocManager::install("DESeq2")
if(!require(apeglm)) BiocManager::install("apeglm")
if(!require(BiocParallel)) BiocManager::install("BiocParallel")
if(!require(genefilter)) BiocManager::install("genefilter")
if(!require(AnnotationDbi)) BiocManager::install("AnnotationDbi")
if(!require(ReportingTools)) BiocManager::install("ReportingTools")
if(!require(RUVSeq)) BiocManager::install("RUVSeq")
if(!require(sva)) BiocManager::install("sva")
if(!require(Gviz)) BiocManager::install("Gviz")
# Chunk 3
# lectura de los ficheros
targets <- read.csv("./input/targets.csv", header=TRUE, sep=",")
counts  <- read.csv("./input/counts.csv",  header=TRUE, sep=";",row.names = 1)
# comprobación de las dimensiones
dim(targets)
dim(counts)
# seleccionar aleatóriamente 10 muestras de cada grupo (NIT, SFI y ELI) del fichero "targets"
set.seed(12345)
sample_NIT <- sample(targets[which(targets$Group=="NIT"),"Sample_Name"],10)
sample_SFI <- sample(targets[which(targets$Group=="SFI"),"Sample_Name"],10)
sample_ELI <- sample(targets[which(targets$Group=="ELI"),"Sample_Name"],10)
# cambiar los guiones por puntos en el nombre de las muestras para poder buscar en el fichero "counts"
sample_NIT <- gsub("[-]",".",sample_NIT)
sample_SFI <- gsub("[-]",".",sample_SFI)
sample_ELI <- gsub("[-]",".",sample_ELI)
counts_NTI <- counts[,sample_NIT]
counts_SFI <- counts[,sample_SFI]
counts_ELI <- counts[,sample_ELI]
# fichero de contaje: cts
cts0 <- cbind(counts_NTI,counts_SFI,counts_ELI)
nombrescol <- c(paste("NIT",1:10,sep=""),paste("SFI",1:10,sep=""),paste("ELI",1:10,sep=""))
colnames(cts0) <- nombrescol
# fichero de información de las muestras
coldata <- data.frame(nombrescol,type=c(rep("NIT",10),rep("SFI",10),rep("ELI",10)))
coldata$type <- factor(coldata$type, levels = c("NIT","SFI","ELI"))
# Chunk 4
contaje.max.gen <- apply(cts0,1,max)
summary(contaje.max.gen)
contaje.max.muestra <- apply(cts0,2,max)
summary(contaje.max.muestra)
keep <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep <- count.muestra[count.muestra<=2]
cts <- cts1[keep,]
cts <- na.omit(cts)
dim(cts)
keep[1:10]
keep1 <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep2 <- count.muestra[count.muestra<=2]
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
# lectura de los ficheros
targets <- read.csv("./input/targets.csv", header=TRUE, sep=",")
counts  <- read.csv("./input/counts.csv",  header=TRUE, sep=";",row.names = 1)
# comprobación de las dimensiones
dim(targets)
dim(counts)
# seleccionar aleatóriamente 10 muestras de cada grupo (NIT, SFI y ELI) del fichero "targets"
set.seed(12345)
sample_NIT <- sample(targets[which(targets$Group=="NIT"),"Sample_Name"],10)
sample_SFI <- sample(targets[which(targets$Group=="SFI"),"Sample_Name"],10)
sample_ELI <- sample(targets[which(targets$Group=="ELI"),"Sample_Name"],10)
# cambiar los guiones por puntos en el nombre de las muestras para poder buscar en el fichero "counts"
sample_NIT <- gsub("[-]",".",sample_NIT)
sample_SFI <- gsub("[-]",".",sample_SFI)
sample_ELI <- gsub("[-]",".",sample_ELI)
counts_NTI <- counts[,sample_NIT]
counts_SFI <- counts[,sample_SFI]
counts_ELI <- counts[,sample_ELI]
# fichero de contaje: cts
cts0 <- cbind(counts_NTI,counts_SFI,counts_ELI)
nombrescol <- c(paste("NIT",1:10,sep=""),paste("SFI",1:10,sep=""),paste("ELI",1:10,sep=""))
colnames(cts0) <- nombrescol
# fichero de información de las muestras
coldata <- data.frame(nombrescol,type=c(rep("NIT",10),rep("SFI",10),rep("ELI",10)))
coldata$type <- factor(coldata$type, levels = c("NIT","SFI","ELI"))
contaje.max.gen <- apply(cts0,1,max)
summary(contaje.max.gen)
contaje.max.muestra <- apply(cts0,2,max)
summary(contaje.max.muestra)
keep1 <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.ceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]==0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.ceros)
keep2 <- count.muestra[count.muestra<=2]
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
ddf
df
dataf <- data.frame(x=c(1,2,3),y=c(0,1,1))
ddata()
dataf
apply(dataf,1,cant.ceros)
keep1 <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- count.muestra[count.muestra<=2]
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
View(cts)
View(cts)
apply(dataf,1,cant.noceros)
dataf
keep1 <- contaje.max.gen[contaje.max.gen>1] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de no ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- count.muestra[count.muestra<=2]
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
count.muestra
length(keep1)
length(keep2)
count.muestra[1:3]
keep2[1:3]
cts1["ENSG00000240453.1",]
cts1["ENSG00000248480.1",]
View(cts0)
View(cts0)
keep1
keep1[1:3]
cts0[1,]
cts1[1,]
keep1[1:3]
cts0[1,]
cts0["ENSG00000223972.4",]
cts1["ENSG00000223972.4",]
cts1[1,]
keep1[1]
keep1 <- contaje.max.gen[which(contaje.max.gen>1)] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de no ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- count.muestra[count.muestra<=2]
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
keep1 <- contaje.max.gen[which(contaje.max.gen>1)] #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de no ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- count.muestra[which(count.muestra<=2)]
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
View(cts)
x <- c(1,2,3)
x[x=3]
x <- c(10,20,30)
x[x=3]
x[x=30]
x[which(x=30)]
x[which(x==30)]
x[x==30]
x <- c(1,3,5,7,8)
which(x==3)
which(x>=7)
keep1 <- which(contaje.max.gen>1) #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de no ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- which(count.muestra<=2)
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
View(cts)
View(cts)
keep1 <- which(contaje.max.gen>1) #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de no ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- which(count.muestra<=1)
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
View(cts)
View(cts)
keep1 <- which(contaje.max.gen>1) #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de no ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- which(count.muestra>=2) # genes en almenos dos muestras
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ type)
dds
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
mcols(dds)
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
mcols(dds)
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
?assay
?vst
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
colData(vsd)
rld <- rlog(dds, blind = FALSE)
head(assay(rld), 3)
library("dplyr")
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"),
as_data_frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"))
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
colData(vsd)
library("dplyr")
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
library("dplyr")
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
sampleDists <- dist(t(assay(vsd)))
sampleDists
sampleDists <- dist(t(assay(vsd)))
sampleDists
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$dex, vsd$cell, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
plotPCA(vsd, intgroup = c("NIT", "SFI"))
plotPCA(vsd, type = c("NIT", "SFI"))
plotPCA(vsd, intgroup  = c("NIT", "SFI"))
coldata(dds)
vsd$type
vsd$sizeFactor
vsd$nombrescol
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$type, vsd$nombrescol, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
