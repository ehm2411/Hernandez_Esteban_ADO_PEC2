# Chunk 12
library("apeglm")
resultsNames(dds)
#resNITSFI <- lfcShrink(dds, coef="Group_NIT_vs_ELI", type="normal")
resNITSFI <- lfcShrink(dds,3,type="normal")
resNITELI <- lfcShrink(dds, coef="Group_NIT_vs_ELI", type="apeglm")
resSFIELI <- lfcShrink(dds, coef="Group_SFI_vs_ELI", type="apeglm")
plotMA(resNITSFI,ylim=c(-5,5),main="MA Plot NIT vs SFI")
plotMA(resNITELI,ylim=c(-5,5),main="MA Plot NIT vs ELI")
plotMA(resSFIELI,ylim=c(-5,5),main="MA Plot SFI vs ELI")
# Chunk 13
hist(resNITSFI$pvalue[resNITSFI$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white",main="Histograma p-valores con baseMean > 1 (NIT vs SFI)")
hist(resNITELI$pvalue[resNITELI$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white",main="Histograma p-valores con baseMean > 1 (NIT vs ELI)")
hist(resSFIELI$pvalue[resSFIELI$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white",main="Histograma p-valores con baseMean > 1 (SFI vs ELI)")
# Chunk 14
library("genefilter")
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 15)
# global
mat  <- assay(vsd)[topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("Group","alias")])
pheatmap(mat, annotation_col = anno,main="Heat Map 3 NIT-SFI-ELI")
# NIT-SFI
matNS  <- assay(vsd)[topVarGenes, 1:20]
matNS  <- matNS - rowMeans(matNS)
annoNS <- as.data.frame(colData(vsd)[1:20, c("Group","alias")])
pheatmap(matNS, annotation_col = annoNS,main="Heat Map 3 NIT-SFI")
# NIT-ELI
matNE  <- assay(vsd)[topVarGenes, c(1:10,21:30)]
matNE  <- matNE - rowMeans(matNE)
annoNE <- as.data.frame(colData(vsd)[c(1:10,21:30), c("Group","alias")])
pheatmap(matNE, annotation_col = annoNE,main="Heat Map 3 NIT-ELI")
# SFI-ELI
matSE  <- assay(vsd)[topVarGenes, 11:30]
matSE  <- matSE - rowMeans(matSE)
annoSE <- as.data.frame(colData(vsd)[11:30, c("Group","alias")])
pheatmap(matSE, annotation_col = annoSE,main="Heat Map 3 SFI-ELI")
library("org.Hs.eg.db")
library("AnnotationDbi")
res$symbol <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
resOrdered <- res[order(res$pvalue),]
head(resOrdered)
library("org.Hs.eg.db")
library("AnnotationDbi")
res$symbol <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
res$entrez <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
resOrdered <- res[order(res$pvalue),]
head(resOrdered)
library("org.Hs.eg.db")
library("AnnotationDbi")
res$symbol <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
res$entrez <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
resOrdered <- res[order(res$pvalue),]
head(resOrdered)
# genes en el top 100
resOrderedDF <- as.data.frame(resOrdered)[1:100, ]
write.csv(resOrderedDF, file = "results.csv")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# paquetes "nativos" de R
if(!require(magrittr)) install.packages("magrittr", dep=TRUE)
if(!require(dplyr)) install.packages("dplyr", dep=TRUE)
if(!require(ggplot2)) install.packages("ggplot2", dep=TRUE)
if(!require(pheatmap)) install.packages("pheatmap", dep=TRUE)
if(!require(RColorBrewer)) install.packages("RColorBrewer", dep=TRUE)
if(!require(ggbeeswarm)) install.packages("ggbeeswarm", dep=TRUE)
if(!require(edgeR)) install.packages("edgeR", dep=TRUE)
# paquetes de Bioconductor
if(!require(BiocManager)) install.packages("BiocManager")
if(!require(Rsamtools)) BiocManager::install("Rsamtools")
if(!require(GenomicFeatures)) BiocManager::install("GenomicFeatures")
if(!require(DESeq2)) BiocManager::install("DESeq2")
if(!require(apeglm)) BiocManager::install("apeglm")
if(!require(BiocParallel)) BiocManager::install("BiocParallel")
if(!require(genefilter)) BiocManager::install("genefilter")
if(!require(AnnotationDbi)) BiocManager::install("AnnotationDbi")
if(!require(ReportingTools)) BiocManager::install("ReportingTools")
if(!require(RUVSeq)) BiocManager::install("RUVSeq")
if(!require(sva)) BiocManager::install("sva")
if(!require(Gviz)) BiocManager::install("Gviz")
round_df <- function(x, digits) {
# round all numeric variables
# x: data frame
# digits: number of digits to round
numeric_columns <- sapply(x, mode) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
# Chunk 3
# lectura de los ficheros
coldata0 <- read.csv("./input/targets.csv", header=TRUE, sep=",")
cts0  <- read.csv("./input/counts.csv",  header=TRUE, sep=";",row.names = 1)
# comprobación de las dimensiones
dim(coldata0)
dim(cts0)
coldata0$Sample_Name <- gsub("[-]",".",coldata0$Sample_Name)
rownames(coldata0) <- coldata0$Sample_Name
all(rownames(coldata0) %in% colnames(cts0))
all(rownames(coldata0) == colnames(cts0))
# seleccionar aleatóriamente 10 muestras de cada grupo (NIT, SFI y ELI) del fichero "targets"
set.seed(12345)
sample_NIT <- sample(coldata0[which(coldata0$Group=="NIT"),"Sample_Name"],10)
sample_SFI <- sample(coldata0[which(coldata0$Group=="SFI"),"Sample_Name"],10)
sample_ELI <- sample(coldata0[which(coldata0$Group=="ELI"),"Sample_Name"],10)
cts <- cts0[,c(sample_NIT,sample_SFI,sample_ELI)]
coldata <- coldata0[c(sample_NIT,sample_SFI,sample_ELI),]
coldata$alias <- c(paste0("NIT",1:10),paste0("SFI",1:10),paste0("ELI",1:10))
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ Group)
nrow(dds)
# Chunk 4
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
# Chunk 5
vsd <- vst(dds, blind = FALSE)
head(assay(vsd)[,1:2], 3)  # datos de solo dos muestras
colData(vsd)[,c(1:2,7:8,10)]
# Chunk 6
library("dplyr")
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
# Chunk 7
sampleDists <- dist(t(assay(vsd)))
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- vsd$alias
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Greens")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
# Chunk 8
plotPCA(vsd, intgroup  = c("Group"))
# Chunk 9
dds <- DESeq(dds, parallel =TRUE)
# Chunk 10
resNITSFI <- results(dds, contrast=c("Group","NIT","SFI"))
round_df(as.data.frame(resNITSFI)[1:5,c(1:4,6)],6)
resNITELI <- results(dds, contrast=c("Group","NIT","ELI"))
round_df(as.data.frame(resNITELI)[1:5,c(1:4,6)],6)
resSFIELI <- results(dds, contrast=c("Group","SFI","ELI"))
round_df(as.data.frame(resSFIELI)[1:5,c(1:4,6)],6)
table(resNITSFI$padj < 0.05)
table(resNITELI$padj < 0.05)
table(resSFIELI$padj < 0.05)
# genes con un p valor ajustado < 0.1
sum(resNITSFI$padj < 0.1, na.rm=TRUE)
sum(resNITELI$padj < 0.1, na.rm=TRUE)
sum(resSFIELI$padj < 0.1, na.rm=TRUE)
resSigNITSFI <- subset(resNITSFI, padj < 0.1)
resSigNITELI <- subset(resNITELI, padj < 0.1)
resSigSFIELI <- subset(resSFIELI, padj < 0.1)
# genes significantes con down-regulation más fuerte
sigNITSFI <- as.data.frame(head(resSigNITSFI[ order(resSigNITSFI$log2FoldChange,
decreasing = TRUE), c(1:4,6)]))
sigNITELI <- as.data.frame(head(resSigNITELI[ order(resSigNITELI$log2FoldChange,
decreasing = TRUE), c(1:4,6)]))
sigSFIELI <- as.data.frame(head(resSigSFIELI[ order(resSigSFIELI$log2FoldChange,
decreasing = TRUE), c(1:4,6)]))
round_df(sigNITSFI,6)
round_df(sigNITELI,6)
round_df(sigSFIELI,6)
# Chunk 11
topGene1 <- rownames(resNITSFI)[which.min(resNITSFI$padj)]
topGene2 <- rownames(resNITELI)[which.min(resNITELI$padj)]
topGene3 <- rownames(resSFIELI)[which.min(resSFIELI$padj)]
library("ggbeeswarm")
library("gridExtra")
geneCounts1 <- plotCounts(dds, gene = topGene1, intgroup = c("Group"),returnData = TRUE)
ggplot(geneCounts1, aes(x = Group, y = count, color = Group, group= Group)) +
scale_y_log10() + geom_point(size = 3) + geom_beeswarm(cex = 2) +
ggtitle("Count Plot: genes más significantes NIT vs SFI")
geneCounts2 <- plotCounts(dds, gene = topGene1, intgroup = c("Group"),returnData = TRUE)
ggplot(geneCounts1, aes(x = Group, y = count, color = Group, group= Group)) +
scale_y_log10() + geom_point(size = 3) + geom_beeswarm(cex = 2) +
ggtitle("Count Plot: genes más significantes NIT vs ELI")
geneCounts3 <- plotCounts(dds, gene = topGene1, intgroup = c("Group"),returnData = TRUE)
ggplot(geneCounts1, aes(x = Group, y = count, color = Group, group= Group)) +
scale_y_log10() + geom_point(size = 3) + geom_beeswarm(cex = 2) +
ggtitle("Count Plot: genes más significantes SFI vs ELI")
# Chunk 12
library("apeglm")
resultsNames(dds)
#resNITSFI <- lfcShrink(dds, coef="Group_NIT_vs_ELI", type="normal")
resNITSFI <- lfcShrink(dds,3,type="normal")
resNITELI <- lfcShrink(dds, coef="Group_NIT_vs_ELI", type="apeglm")
resSFIELI <- lfcShrink(dds, coef="Group_SFI_vs_ELI", type="apeglm")
plotMA(resNITSFI,ylim=c(-5,5),main="MA Plot NIT vs SFI")
plotMA(resNITELI,ylim=c(-5,5),main="MA Plot NIT vs ELI")
plotMA(resSFIELI,ylim=c(-5,5),main="MA Plot SFI vs ELI")
# Chunk 13
hist(resNITSFI$pvalue[resNITSFI$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white",main="Histograma p-valores con baseMean > 1 (NIT vs SFI)")
hist(resNITELI$pvalue[resNITELI$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white",main="Histograma p-valores con baseMean > 1 (NIT vs ELI)")
hist(resSFIELI$pvalue[resSFIELI$baseMean > 1], breaks = 0:20/20,
col = "grey50", border = "white",main="Histograma p-valores con baseMean > 1 (SFI vs ELI)")
# Chunk 14
library("genefilter")
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 15)
# global
mat  <- assay(vsd)[topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("Group","alias")])
pheatmap(mat, annotation_col = anno,main="Heat Map 3 NIT-SFI-ELI")
# NIT-SFI
matNS  <- assay(vsd)[topVarGenes, 1:20]
matNS  <- matNS - rowMeans(matNS)
annoNS <- as.data.frame(colData(vsd)[1:20, c("Group","alias")])
pheatmap(matNS, annotation_col = annoNS,main="Heat Map 3 NIT-SFI")
# NIT-ELI
matNE  <- assay(vsd)[topVarGenes, c(1:10,21:30)]
matNE  <- matNE - rowMeans(matNE)
annoNE <- as.data.frame(colData(vsd)[c(1:10,21:30), c("Group","alias")])
pheatmap(matNE, annotation_col = annoNE,main="Heat Map 3 NIT-ELI")
# SFI-ELI
matSE  <- assay(vsd)[topVarGenes, 11:30]
matSE  <- matSE - rowMeans(matSE)
annoSE <- as.data.frame(colData(vsd)[11:30, c("Group","alias")])
pheatmap(matSE, annotation_col = annoSE,main="Heat Map 3 SFI-ELI")
genes <- data.frame(orig=rownames(cts))
genes$modif <- gsub("\\..*", "", genes$orig, fixed = FALSE)
library("org.Hs.eg.db")
db <- org.Hs.eg.db
keys <- gsub("\\..*", "",row.names(res), fixed = FALSE)
res$symbol <- mapIds(db, keys, "SYMBOL", "ENSEMBL")
library("Gviz")
window <- resGR[topGene] + 1e6
strand(window) <- "*"
res <- resNITSFI
resGRsub <- res[res %over% window]
naOrDup <- is.na(resGRsub$symbol) | duplicated(resGRsub$symbol)
resGRsub$group <- ifelse(naOrDup, names(resGRsub), resGRsub$symbol)
status <- factor(ifelse(resGRsub$padj < 0.1 & !is.na(resGRsub$padj), "sig", "notsig"))
rm(res)
genes <- data.frame(orig=rownames(cts))
genes$modif <- gsub("\\..*", "", genes$orig, fixed = FALSE)
library("org.Hs.eg.db")
db <- org.Hs.eg.db
keys <- gsub("\\..*", "",row.names(res), fixed = FALSE)
res$symbol <- mapIds(db, keys, "SYMBOL", "ENSEMBL")
library("Gviz")
window <- resGR[topGene] + 1e6
strand(window) <- "*"
resGRsub <- res[res %over% window]
naOrDup <- is.na(resGRsub$symbol) | duplicated(resGRsub$symbol)
resGRsub$group <- ifelse(naOrDup, names(resGRsub), resGRsub$symbol)
status <- factor(ifelse(resGRsub$padj < 0.1 & !is.na(resGRsub$padj), "sig", "notsig"))
library("org.Hs.eg.db")
library("AnnotationDbi")
res$symbol <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
res$entrez <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
resOrdered <- res[order(res$pvalue),]
head(resOrdered)
# genes en el top 100
resOrderedDF <- as.data.frame(resOrdered)[1:100, ]
write.csv(resOrderedDF, file = "results.csv")
library("org.Hs.eg.db")
library("AnnotationDbi")
res <- resNITSFI
res$symbol <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
res$entrez <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")
resOrdered <- res[order(res$pvalue),]
head(resOrdered)
# genes en el top 100
resOrderedDF <- as.data.frame(resOrdered)[1:100, ]
write.csv(resOrderedDF, file = "results.csv")
class(res)
# paquetes "nativos" de R
if(!require(magrittr)) install.packages("magrittr", dep=TRUE)
if(!require(dplyr)) install.packages("dplyr", dep=TRUE)
if(!require(ggplot2)) install.packages("ggplot2", dep=TRUE)
if(!require(pheatmap)) install.packages("pheatmap", dep=TRUE)
if(!require(RColorBrewer)) install.packages("RColorBrewer", dep=TRUE)
if(!require(ggbeeswarm)) install.packages("ggbeeswarm", dep=TRUE)
if(!require(gridExtra)) install.packages("gridExtra", dep=TRUE)
# paquetes de Bioconductor
if(!require(BiocManager)) install.packages("BiocManager")
if(!require(Rsamtools)) BiocManager::install("Rsamtools")
if(!require(GenomicFeatures)) BiocManager::install("GenomicFeatures")
if(!require(DESeq2)) BiocManager::install("DESeq2")
if(!require(apeglm)) BiocManager::install("apeglm")
if(!require(BiocParallel)) BiocManager::install("BiocParallel")
if(!require(genefilter)) BiocManager::install("genefilter")
if(!require(AnnotationDbi)) BiocManager::install("AnnotationDbi")
if(!require(ReportingTools)) BiocManager::install("ReportingTools")
if(!require(RUVSeq)) BiocManager::install("RUVSeq")
if(!require(sva)) BiocManager::install("sva")
if(!require(Gviz)) BiocManager::install("Gviz")
if(!require(clusterProfiler)) BiocManager::install("clusterProfiler")
# paquetes "nativos" de R
if(!require(magrittr)) install.packages("magrittr", dep=TRUE)
if(!require(dplyr)) install.packages("dplyr", dep=TRUE)
if(!require(ggplot2)) install.packages("ggplot2", dep=TRUE)
if(!require(pheatmap)) install.packages("pheatmap", dep=TRUE)
if(!require(RColorBrewer)) install.packages("RColorBrewer", dep=TRUE)
if(!require(ggbeeswarm)) install.packages("ggbeeswarm", dep=TRUE)
if(!require(gridExtra)) install.packages("gridExtra", dep=TRUE)
# paquetes de Bioconductor
if(!require(BiocManager)) install.packages("BiocManager")
if(!require(Rsamtools)) BiocManager::install("Rsamtools")
if(!require(GenomicFeatures)) BiocManager::install("GenomicFeatures")
if(!require(DESeq2)) BiocManager::install("DESeq2")
if(!require(apeglm)) BiocManager::install("apeglm")
if(!require(BiocParallel)) BiocManager::install("BiocParallel")
if(!require(genefilter)) BiocManager::install("genefilter")
if(!require(AnnotationDbi)) BiocManager::install("AnnotationDbi")
if(!require(ReportingTools)) BiocManager::install("ReportingTools")
if(!require(RUVSeq)) BiocManager::install("RUVSeq")
if(!require(sva)) BiocManager::install("sva")
if(!require(Gviz)) BiocManager::install("Gviz")
if(!require(clusterProfiler)) BiocManager::install("clusterProfiler")
if(!require(pathview)) BiocManager::install("pathview")
?gseGO
gse <- gseGO(geneList=gsub("\\..*", "",row.names(res), fixed = FALSE),
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
emapplot(gse, showCategory = 10)
gene_list = sort(gsub("\\..*", "",row.names(res), fixed = FALSE), decreasing = TRUE)
# ordenar los genes en orden decreciente
gene_list = sort(gsub("\\..*", "",row.names(res), fixed = FALSE), decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
emapplot(gse, showCategory = 10)
gene_list
class(org.Hs.eg.db)
org.Hs.eg.db$trace
org.Hs.egENSEMBL
summary(org.Hs.egENSEMBL)
res$symbol
# ordenar los genes en orden decreciente
gene_list = sort(res$symbol, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
emapplot(gse, showCategory = 10)
res$symbol[1:10]
# ordenar los genes en orden decreciente
gene_list = sort(na.omit(res$symbol), decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
emapplot(gse, showCategory = 10)
na.omit(res$symbol)
na.omit(res$symbol)[1:10]
na.omit(res$symbol)[1]
na.omit(res$entrez)[1]
# ordenar los genes en orden decreciente
gene_list = sort(na.omit(res$entrez), decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
emapplot(gse, showCategory = 10)
res$log2FoldChange
?GSEnrichAnalyze
install.packages(GO.db)
install.packages("GO.db")
install.packages("GO.db")
install.packages("GO.db")
resSigNITELI
rownames(resSigNITELI)
dim(resSigNITELI)
rownames(resSigNITELI)
# ordenar los genes en orden decreciente
#gene_list = sort(na.omit(res$entrez), decreasing = TRUE)
gene_list = sort(rownames(resSigNITELI), decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
emapplot(gse, showCategory = 10)
# paquetes "nativos" de R
if(!require(magrittr)) install.packages("magrittr", dep=TRUE)
if(!require(dplyr)) install.packages("dplyr", dep=TRUE)
if(!require(ggplot2)) install.packages("ggplot2", dep=TRUE)
if(!require(pheatmap)) install.packages("pheatmap", dep=TRUE)
if(!require(RColorBrewer)) install.packages("RColorBrewer", dep=TRUE)
if(!require(ggbeeswarm)) install.packages("ggbeeswarm", dep=TRUE)
if(!require(gridExtra)) install.packages("gridExtra", dep=TRUE)
# paquetes de Bioconductor
if(!require(BiocManager)) install.packages("BiocManager")
if(!require(Rsamtools)) BiocManager::install("Rsamtools")
if(!require(GenomicFeatures)) BiocManager::install("GenomicFeatures")
if(!require(DESeq2)) BiocManager::install("DESeq2")
if(!require(apeglm)) BiocManager::install("apeglm")
if(!require(BiocParallel)) BiocManager::install("BiocParallel")
if(!require(genefilter)) BiocManager::install("genefilter")
if(!require(AnnotationDbi)) BiocManager::install("AnnotationDbi")
if(!require(ReportingTools)) BiocManager::install("ReportingTools")
if(!require(RUVSeq)) BiocManager::install("RUVSeq")
if(!require(sva)) BiocManager::install("sva")
if(!require(Gviz)) BiocManager::install("Gviz")
if(!require(clusterProfiler)) BiocManager::install("clusterProfiler")
if(!require(pathview)) BiocManager::install("pathview")
if(!require(enrichplot)) BiocManager::install("enrichplot")
round_df <- function(x, digits) {
# round all numeric variables
# x: data frame
# digits: number of digits to round
numeric_columns <- sapply(x, mode) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
# ordenar los genes en orden decreciente
#gene_list = sort(na.omit(res$entrez), decreasing = TRUE)
gene_list = sort(rownames(resSigNITELI), decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
emapplot(gse, showCategory = 10)
