library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
sampleDists <- dist(t(assay(vsd)))
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$type, vsd$muestra, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
plotPCA(vsd, intgroup  = c("type","muestra"))
mcols(dds)
resNITSFI <- results(dds, contrast=c("type","NIT","SFI"))
resNITSFI
res <- resNITSFI
#resNITELI <- results(dds, contrast=c("type","NIT","ELI"))
#resNITELI
#resSFIELI <- results(dds, contrast=c("type","SFI","ELI"))
#resSFIELI
table(resNITSFI$padj < 0.05)
# genes con un p valor ajustado < 0.1 (consideramos )
sum(resNITSFI$padj < 0.1, na.rm=TRUE)
resSig <- subset(resNITSFI, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
dds <- DESeq(dds, parallel =TRUE)
resNITSFI <- results(dds, contrast=c("type","NIT","SFI"))
resNITSFI
res <- resNITSFI
#resNITELI <- results(dds, contrast=c("type","NIT","ELI"))
#resNITELI
#resSFIELI <- results(dds, contrast=c("type","SFI","ELI"))
#resSFIELI
table(resNITSFI$padj < 0.05)
# genes con un p valor ajustado < 0.1 (consideramos )
sum(resNITSFI$padj < 0.1, na.rm=TRUE)
resSig <- subset(resNITSFI, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
resNITSFI <- results(dds, contrast=c("type","NIT","SFI"))
resNITSFI
res <- resNITSFI
#resNITELI <- results(dds, contrast=c("type","NIT","ELI"))
#resNITELI
#resSFIELI <- results(dds, contrast=c("type","SFI","ELI"))
#resSFIELI
table(resNITSFI$padj < 0.1)
# genes con un p valor ajustado < 0.1 (consideramos )
sum(resNITSFI$padj < 0.1, na.rm=TRUE)
resSig <- subset(resNITSFI, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# paquetes "nativos" de R
if(!require(magrittr)) install.packages("magrittr", dep=TRUE)
if(!require(dplyr)) install.packages("dplyr", dep=TRUE)
if(!require(ggplot2)) install.packages("ggplot2", dep=TRUE)
if(!require(pheatmap)) install.packages("pheatmap", dep=TRUE)
if(!require(RColorBrewer)) install.packages("RColorBrewer", dep=TRUE)
if(!require(ggbeeswarm)) install.packages("ggbeeswarm", dep=TRUE)
if(!require(edgeR)) install.packages("edgeR", dep=TRUE)
# paquetes de Bioconductor
if(!require(BiocManager)) install.packages("BiocManager")
if(!require(Rsamtools)) BiocManager::install("Rsamtools")
if(!require(GenomicFeatures)) BiocManager::install("GenomicFeatures")
if(!require(DESeq2)) BiocManager::install("DESeq2")
if(!require(apeglm)) BiocManager::install("apeglm")
if(!require(BiocParallel)) BiocManager::install("BiocParallel")
if(!require(genefilter)) BiocManager::install("genefilter")
if(!require(AnnotationDbi)) BiocManager::install("AnnotationDbi")
if(!require(ReportingTools)) BiocManager::install("ReportingTools")
if(!require(RUVSeq)) BiocManager::install("RUVSeq")
if(!require(sva)) BiocManager::install("sva")
if(!require(Gviz)) BiocManager::install("Gviz")
# Chunk 3
# lectura de los ficheros
targets <- read.csv("./input/targets.csv", header=TRUE, sep=",")
counts  <- read.csv("./input/counts.csv",  header=TRUE, sep=";",row.names = 1)
# comprobación de las dimensiones
dim(targets)
dim(counts)
# seleccionar aleatóriamente 10 muestras de cada grupo (NIT, SFI y ELI) del fichero "targets"
set.seed(12345)
sample_NIT <- sample(targets[which(targets$Group=="NIT"),"Sample_Name"],10)
sample_SFI <- sample(targets[which(targets$Group=="SFI"),"Sample_Name"],10)
sample_ELI <- sample(targets[which(targets$Group=="ELI"),"Sample_Name"],10)
# cambiar los guiones por puntos en el nombre de las muestras para poder buscar en el fichero "counts"
sample_NIT <- gsub("[-]",".",sample_NIT)
sample_SFI <- gsub("[-]",".",sample_SFI)
sample_ELI <- gsub("[-]",".",sample_ELI)
counts_NTI <- counts[,sample_NIT]
counts_SFI <- counts[,sample_SFI]
counts_ELI <- counts[,sample_ELI]
# fichero de contaje: cts
cts0 <- cbind(counts_NTI,counts_SFI,counts_ELI)
#cts0 <- cbind(counts_NTI,counts_SFI)
muestra <- c(paste("NIT",1:10,sep=""),paste("SFI",1:10,sep=""),paste("ELI",1:10,sep=""))
#muestra <- c(paste("NIT",1:10,sep=""),paste("SFI",1:10,sep=""))
colnames(cts0) <- muestra
# fichero de información de las muestras
coldata <- data.frame(muestra,type=c(rep("NIT",10),rep("SFI",10),rep("ELI",10)))
coldata$type <- factor(coldata$type, levels = c("NIT","SFI","ELI"))
#coldata <- data.frame(muestra,type=c(rep("NIT",10),rep("SFI",10)))
#coldata$type <- factor(coldata$type, levels = c("NIT","SFI"))
# Chunk 4
contaje.max.gen <- apply(cts0,1,max)
summary(contaje.max.gen)
contaje.max.muestra <- apply(cts0,2,max)
summary(contaje.max.muestra)
# Chunk 5
keep1 <- which(contaje.max.gen>1) #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de no ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- which(count.muestra>=2) # genes en almenos dos muestras
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
# Chunk 6
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ type)
dds
# Chunk 7
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
mcols(dds)
# Chunk 8
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
colData(vsd)
# Chunk 9
library("dplyr")
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
# Chunk 10
sampleDists <- dist(t(assay(vsd)))
# Chunk 11
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$type, vsd$muestra, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
# Chunk 12
plotPCA(vsd, intgroup  = c("type","muestra"))
# Chunk 13
dds <- DESeq(dds, parallel =TRUE)
# Chunk 14
resNITSFI <- results(dds, contrast=c("type","NIT","SFI"))
resNITSFI
res <- resNITSFI
#resNITELI <- results(dds, contrast=c("type","NIT","ELI"))
#resNITELI
#resSFIELI <- results(dds, contrast=c("type","SFI","ELI"))
#resSFIELI
table(resNITSFI$padj < 0.05)
# genes con un p valor ajustado < 0.1 (consideramos )
sum(resNITSFI$padj < 0.1, na.rm=TRUE)
resSig <- subset(resNITSFI, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
# Chunk 15
topGene <- rownames(res)[which.min(res$padj)]
library("ggbeeswarm")
geneCounts <- plotCounts(dds, gene = topGene, intgroup = c("type","muestra"),returnData = TRUE)
ggplot(geneCounts, aes(x = type, y = count, color = muestra, group = muestra)) +
scale_y_log10() + geom_point(size = 3) + geom_line()
# Chunk 16
library("apeglm")
resultsNames(dds)
res <- lfcShrink(dds, coef="type_SFI_vs_NIT", type="apeglm")
class(res)
colnames(res)
summary(res)
plotMA(res, ylim = c(-5, 5))
plotMA(res, ylim = c(-5,5))
topGene <- rownames(res)[which.min(res$padj)]
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})
# Chunk 17
library("genefilter")
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 20)
mat  <- assay(vsd)[topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("muestra","type")])
pheatmap(mat, annotation_col = anno)
resGR <- results(dds, name="type_SFI_vs_NIT", format="GRanges")
resGR$log2FoldChange <- res$log2FoldChange
resGR
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# paquetes "nativos" de R
if(!require(magrittr)) install.packages("magrittr", dep=TRUE)
if(!require(dplyr)) install.packages("dplyr", dep=TRUE)
if(!require(ggplot2)) install.packages("ggplot2", dep=TRUE)
if(!require(pheatmap)) install.packages("pheatmap", dep=TRUE)
if(!require(RColorBrewer)) install.packages("RColorBrewer", dep=TRUE)
if(!require(ggbeeswarm)) install.packages("ggbeeswarm", dep=TRUE)
if(!require(edgeR)) install.packages("edgeR", dep=TRUE)
# paquetes de Bioconductor
if(!require(BiocManager)) install.packages("BiocManager")
if(!require(Rsamtools)) BiocManager::install("Rsamtools")
if(!require(GenomicFeatures)) BiocManager::install("GenomicFeatures")
if(!require(DESeq2)) BiocManager::install("DESeq2")
if(!require(apeglm)) BiocManager::install("apeglm")
if(!require(BiocParallel)) BiocManager::install("BiocParallel")
if(!require(genefilter)) BiocManager::install("genefilter")
if(!require(AnnotationDbi)) BiocManager::install("AnnotationDbi")
if(!require(ReportingTools)) BiocManager::install("ReportingTools")
if(!require(RUVSeq)) BiocManager::install("RUVSeq")
if(!require(sva)) BiocManager::install("sva")
if(!require(Gviz)) BiocManager::install("Gviz")
# Chunk 3
# lectura de los ficheros
targets <- read.csv("./input/targets.csv", header=TRUE, sep=",")
counts  <- read.csv("./input/counts.csv",  header=TRUE, sep=";",row.names = 1)
# comprobación de las dimensiones
dim(targets)
dim(counts)
# seleccionar aleatóriamente 10 muestras de cada grupo (NIT, SFI y ELI) del fichero "targets"
set.seed(12345)
sample_NIT <- sample(targets[which(targets$Group=="NIT"),"Sample_Name"],10)
sample_SFI <- sample(targets[which(targets$Group=="SFI"),"Sample_Name"],10)
sample_ELI <- sample(targets[which(targets$Group=="ELI"),"Sample_Name"],10)
# cambiar los guiones por puntos en el nombre de las muestras para poder buscar en el fichero "counts"
sample_NIT <- gsub("[-]",".",sample_NIT)
sample_SFI <- gsub("[-]",".",sample_SFI)
sample_ELI <- gsub("[-]",".",sample_ELI)
counts_NTI <- counts[,sample_NIT]
counts_SFI <- counts[,sample_SFI]
counts_ELI <- counts[,sample_ELI]
# fichero de contaje: cts
cts0 <- cbind(counts_NTI,counts_SFI,counts_ELI)
#cts0 <- cbind(counts_NTI,counts_SFI)
muestra <- c(paste("NIT",1:10,sep=""),paste("SFI",1:10,sep=""),paste("ELI",1:10,sep=""))
#muestra <- c(paste("NIT",1:10,sep=""),paste("SFI",1:10,sep=""))
colnames(cts0) <- muestra
# fichero de información de las muestras
coldata <- data.frame(muestra,type=c(rep("NIT",10),rep("SFI",10),rep("ELI",10)))
coldata$type <- factor(coldata$type, levels = c("NIT","SFI","ELI"))
#coldata <- data.frame(muestra,type=c(rep("NIT",10),rep("SFI",10)))
#coldata$type <- factor(coldata$type, levels = c("NIT","SFI"))
# Chunk 4
contaje.max.gen <- apply(cts0,1,max)
summary(contaje.max.gen)
contaje.max.muestra <- apply(cts0,2,max)
summary(contaje.max.muestra)
# Chunk 5
keep1 <- which(contaje.max.gen>1) #genes con al menos un contaje mayor que 1
dim(cts0)
cts1 <- cts0[keep1,]
cts1 <- na.omit(cts1)
dim(cts1)
# función para calcular la cantidad de no ceros en un vector
cant.noceros <- function(vector) {
cont <- 0
for (i in 1:length(vector)){
if (vector[i]!=0) cont <- cont + 1
}
return(cont)
}
count.muestra <- apply(cts1,1,cant.noceros)
keep2 <- which(count.muestra>=2) # genes en almenos dos muestras
cts <- cts1[keep2,]
cts <- na.omit(cts)
dim(cts)
# Chunk 6
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ type)
dds
# Chunk 7
featureData <- data.frame(gene=rownames(cts))
mcols(dds) <- DataFrame(mcols(dds), featureData)
mcols(dds)
# Chunk 8
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
colData(vsd)
# Chunk 9
library("dplyr")
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
# Chunk 10
sampleDists <- dist(t(assay(vsd)))
# Chunk 11
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$type, vsd$muestra, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
# Chunk 12
plotPCA(vsd, intgroup  = c("type","muestra"))
# Chunk 13
dds <- DESeq(dds, parallel =TRUE)
# Chunk 14
resNITSFI <- results(dds, contrast=c("type","NIT","SFI"))
resNITSFI
res <- resNITSFI
#resNITELI <- results(dds, contrast=c("type","NIT","ELI"))
#resNITELI
#resSFIELI <- results(dds, contrast=c("type","SFI","ELI"))
#resSFIELI
table(resNITSFI$padj < 0.05)
# genes con un p valor ajustado < 0.1 (consideramos )
sum(resNITSFI$padj < 0.1, na.rm=TRUE)
resSig <- subset(resNITSFI, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
# Chunk 15
topGene <- rownames(res)[which.min(res$padj)]
library("ggbeeswarm")
geneCounts <- plotCounts(dds, gene = topGene, intgroup = c("type","muestra"),returnData = TRUE)
ggplot(geneCounts, aes(x = type, y = count, color = muestra, group = muestra)) +
scale_y_log10() + geom_point(size = 3) + geom_line()
# Chunk 16
library("apeglm")
resultsNames(dds)
res <- lfcShrink(dds, coef="type_SFI_vs_NIT", type="apeglm")
class(res)
colnames(res)
summary(res)
plotMA(res, ylim = c(-5, 5))
plotMA(res, ylim = c(-5,5))
topGene <- rownames(res)[which.min(res$padj)]
with(res[topGene, ], {
points(baseMean, log2FoldChange, col="dodgerblue", cex=2, lwd=2)
text(baseMean, log2FoldChange, topGene, pos=2, col="dodgerblue")
})
library("genefilter")
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 20)
mat  <- assay(vsd)[topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("muestra","type")])
pheatmap(mat, annotation_col = anno)
resGR <- results(dds, name="type_SFI_vs_NIT", format="GRanges")
resGR$log2FoldChange <- res$log2FoldChange
resGR
library("org.Hs.eg.db")
resGR$symbol <- mapIds(org.Hs.eg.db, names(resGR), "SYMBOL", "ENSEMBL")
library("Gviz")
window <- resGR[topGene] + 1e6
strand(window) <- "*"
resGRsub <- resGR[resGR %over% window]
naOrDup <- is.na(resGRsub$symbol) | duplicated(resGRsub$symbol)
resGRsub$group <- ifelse(naOrDup, names(resGRsub), resGRsub$symbol)
status <- factor(ifelse(resGRsub$padj < 0.1 & !is.na(resGRsub$padj), "sig", "notsig"))
resGR <- results(dds, name="type_SFI_vs_NIT", format="GRanges")
resultsNames(dds)
resNITSFI <- results(dds, contrast=c("type","NIT","SFI"))
resNITSFI
res <- resNITSFI
resNITELI <- results(dds, contrast=c("type","NIT","ELI"))
resNITELI
resSFIELI <- results(dds, contrast=c("type","SFI","ELI"))
resSFIELI
table(resNITSFI$padj < 0.05)
# genes con un p valor ajustado < 0.1 (consideramos )
sum(resNITSFI$padj < 0.1, na.rm=TRUE)
resSig <- subset(resNITSFI, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
resultsNames(resNITSFI)
resultsNames(res)
?results
resGR <- results(dds, name="type_SFI_vs_NIT", format="DataFrame")
cols(resGR)
colnames(resGR)
resGR$log2FoldChange <- res$log2FoldChange
resGR
library("org.Hs.eg.db")
resGR$symbol <- mapIds(org.Hs.eg.db, names(resGR), "SYMBOL", "ENSEMBL")
names(resGR)
resGR <- results(dds, name="type_SFI_vs_NIT", format="GRangesList")
resGR$log2FoldChange <- res$log2FoldChange
resGR
library("org.Hs.eg.db")
resGR$symbol <- mapIds(org.Hs.eg.db, names(resGR), "SYMBOL", "ENSEMBL")
resGR <- results(dds, name="type_SFI_vs_NIT", format="DataFrame")
resGR$log2FoldChange <- res$log2FoldChange
resGR
library("org.Hs.eg.db")
mapsIds
mapIds
?mapIds
dds
names(resGR)
resGR
resGR <- results(dds, name="type_SFI_vs_NIT", format="GRanges")
colnames(dds)
colnames(results(dds))
res
colnames(res)
rownames(cts)
genes <- rownames(cts)
length(genes)
genes <- data.frame(orig=rownames(cts))
genes$modif <- gsub("\\..*", "", genes$orig, fixed = FALSE)
View(genes)
View(genes)
library("org.Hs.eg.db")
resGR$symbol <- mapIds(org.Hs.eg.db, names(genes$modif), "SYMBOL", "ENSEMBL")
?mapIds
resGR$symbol <- mapIds(org.Hs.eg.db, names(genes$modif), "SYMBOL", "ENSEMBL")
#resGR$symbol <- mapIds(org.Hs.eg.db, names(resGR), "SYMBOL", "ENSEMBL")
keys <- head( keys(org.Hs.eg.dbb))
keys <- head( keys(org.Hs.eg.db))
resGR$symbol <- mapIds(org.Hs.eg.db, names(genes$modif), "SYMBOL", "ENSEMBL")
resGR$symbol <- mapIds(org.Hs.eg.db, keys, names(genes$modif), "SYMBOL", "ENSEMBL")
resGR$symbol <- mapIds(org.Hs.eg.db, keys, genes$modif, "SYMBOL", "ENSEMBL")
genes$modif
select(org.Hs.eg.db, keys=keys, columns = c("SYMBOL","UNIGENE"))
?select
db <- org.Hs.eg.db
keys(db)
class(genes$modif)
length(genes$modif)
db <- org.Hs.eg.db
keys <- keys(db)
resGR$symbol <- mapIds(db, keys, genes$modif, "SYMBOL", "ENSEMBL")
res$symbol <- mapIds(org.Hs.eg.db,
keys=row.names(res),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
row.names(res)
library("AnnotationDbi")
columns(org.Hs.eg.db)
res$symbol <- mapIds(org.Hs.eg.db,
keys=gsub("\\..*", "",row.names(res), fixed = FALSE),
column="SYMBOL",
keytype="ENSEMBL",
multiVals="first")
library("org.Hs.eg.db")
db <- org.Hs.eg.db
keys <- keys(db)
resGR$symbol <- mapIds(db, keys, gsub("\\..*", "",row.names(res), fixed = FALSE), "SYMBOL", "ENSEMBL")
library("org.Hs.eg.db")
db <- org.Hs.eg.db
keys <- keys(db)
keys <- gsub("\\..*", "",row.names(res), fixed = FALSE)
mapIds(db, keys, "SYMBOL", "ENSEMBL")
symbol <- mapIds(db, keys, "SYMBOL", "ENSEMBL")
class(symbol)
length(symbol)
na.omit(symbol)
symbol2 <- na.omit(symbol)
length(symbol)
length(symbol2)
res
class(res)
genes <- data.frame(orig=rownames(cts))
genes$modif <- gsub("\\..*", "", genes$orig, fixed = FALSE)
library("org.Hs.eg.db")
db <- org.Hs.eg.db
keys <- gsub("\\..*", "",row.names(res), fixed = FALSE)
res$symbol <- mapIds(db, keys, "SYMBOL", "ENSEMBL")
library("Gviz")
window <- resGR[topGene] + 1e6
strand(window) <- "*"
resGRsub <- res[res %over% window]
naOrDup <- is.na(resGRsub$symbol) | duplicated(resGRsub$symbol)
resGRsub$group <- ifelse(naOrDup, names(resGRsub), resGRsub$symbol)
status <- factor(ifelse(resGRsub$padj < 0.1 & !is.na(resGRsub$padj), "sig", "notsig"))
?strand
class(res)
table(res$symbol)
